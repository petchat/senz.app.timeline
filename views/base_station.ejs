<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
    <meta name="viewport" content="initial-scale=1.0, user-scalable=no"/>
    <style type="text/css">
        body, html, #allmap {
            width: 100%;
            height: 100%;
            overflow: hidden;
            margin: 0;
        }
    </style>
    <script src="//code.jquery.com/jquery-1.11.3.min.js"></script>
    <script type="text/javascript" src="http://underscorejs.org/underscore-min.js"></script>

    <script src="https://leancloud.cn/scripts/lib/av-0.5.1.min.js"></script>
    <script type="text/javascript" src="http://api.map.baidu.com/api?v=2.0&ak=bHbEGIEzXaATRk08GLSZSGUA"></script>
    <script type="text/javascript" src="http://developer.baidu.com/map/jsdemo/demo/convertor.js"></script>
    <script type="text/javascript"
            src="http://api.map.baidu.com/library/DistanceTool/1.2/src/DistanceTool_min.js"></script>


    <title>地图展示</title>
</head>
<body>
<div id="allmap"></div>
<input type="button" value="开启" onclick="myDis.open()"/>
<input type="button" value="关闭" onclick="myDis.close()"/>
</body>
</html>
<script type="text/javascript">

    param = <%- JSON.stringify(data) %>
            console.log('param from backend:', param)


    // DAO
    var userlocationId = 'u7jwfvuoi3to87qtkmurvxgjdm5tmzvgpooo0d8wfm0dfdko'
    var userlocationKey = 'w6llno78ayu4fewyvgwr6h3v7zjqpz4g262g4htrtvw7jgdg'

    AV.initialize(userlocationId, userlocationKey)

    var AVConvertAdaptor = function (avObjects) {
        var promise = new AV.Promise()
        var points = []
        avObjects.forEach(function (avObject) {
            var loc = avObject.get('location')
            var point = {}
            point.lat = loc.latitude
            point.lng = loc.longitude

            points.push(point)
        })

        converter(points).then(function (result) {
            for (var i = 0; i < result.length; i++) {

                var point = new AV.GeoPoint({
                    latitude: result[i][0],
                    longitude: result[i][1]
                });

                avObjects[i].set('location', point)
            }

            promise.resolve(avObjects)
        })

        return promise
    }


    var converter = function (points) {
        var promise = new AV.Promise()
        var new_points = [];
        var i = 0;
        var parseCallback = function (point) {
            new_points.push(point);
            i++;
            if (i < points.length) {
                BMap.Convertor.translate(points[i], 2, parseCallback);
            } else {

//                    callback(new_points);

                var coors = []
                new_points.forEach(function (point) {
//                    coors.push([point.lat, point.lng])
                    coors.push([point.lat, point.lng])
                })

                console.log('convert finished, length:', coors.length)
                promise.resolve(coors)
            }
        };
        BMap.Convertor.translate(points[i], 2, parseCallback);

        return promise
    };


    var _findAll = function (query) {
        return query.count().then(
                function (count) {
                    var promises = [];
                    var pages = Math.ceil(count / 1000);
                    for (var i = 0; i <= pages; i++) {
                        var _query = _.clone(query);
                        _query.limit(1000);
                        _query.skip(i * 1000);
                        promises.push(_query.find());
                    }
                    return AV.Promise.all(promises);
                },
                function (error) {
                    return AV.Promise.error(error);
                }
        ).then(
                function (results) {
                    var rebuid_result = [];
                    results.forEach(function (result_list) {
                        result_list.forEach(function (list_item) {
                            rebuid_result.push(list_item);
                        });
                    });
                    return AV.Promise.as(rebuid_result);
                },
                function (error) {
                    return AV.Promise.error(error);
                }
        );
    };

    var getUserLocation = function (uid, tsStart, tsEnd) {
        console.log('uid:', uid, 'tsStart:', tsStart, 'tsEnd:', tsEnd)

        var promise = new AV.Promise()

        var UserLocation = AV.Object.extend('UserLocation')
        var User = AV.Object.extend('_User')

        var query = new AV.Query(UserLocation)

        var up = new User()
        up.id = uid

        query.equalTo('user', up)
        query.greaterThan('timestamp', tsStart)
        query.lessThan('timestamp', tsEnd)

        var raw = null

        _findAll(query).then(function (result) {
            console.log('user location length:', result.length)
            promise.resolve(result)

        })
        return promise
    }

    var getLogTrace = function (installationId, tsStart, tsEnd) {
        var promise = new AV.Promise()

    }

    var getUPois = function (uid) {
        var promise = new AV.Promise()
        var UPoi = AV.Object.extend('u_poi')
        var User = AV.Object.extend('_User')

        var query = new AV.Query(UPoi)

        var up = new User()
        up.id = uid

        query.equalTo('user', up)

        _findAll(query).then(function (result) {
            console.log('u_poi length:', result.length)
            promise.resolve(result)
        })

        return promise
    }

    var getUPoiEvidences = function (upois) {
        var promise = new AV.Promise()
        var marked_UserLocation = AV.Object.extend('marked_UserLocation')

        var query = new AV.Query(marked_UserLocation)
        query.containedIn('u_poi', upois)
        query.doesNotExist("u_poi_visit_log")

        _findAll(query).then(function (result) {
            console.log('u_poi evidences length:', result.length)
            promise.resolve(result)
        })

        return promise
    }

    var addEvidences = function (map, evidences) {

        if (evidences === null) {
            evidences = []
        }


        var iconUri = '/images/evidence_icon.png'
        var evidenceIcon = new BMap.Icon(iconUri, new BMap.Size(16, 16));

        evidences.forEach(function (evidence) {
            var loc = evidence.get('location')
            var coor = [loc.latitude, loc.longitude]
            var point = new BMap.Point(loc.longitude, loc.latitude)

            var marker = new BMap.Marker(point, {icon: evidenceIcon});  // 创建标注
            var date = new Date(evidence.get('timestamp'))

            marker.addEventListener('click', function (e) {
                var html = '<p>' + 'Evidence info:' + '<br/>'
                        + date.toString() + '<br /> '
                        + evidence.get('timestamp') + '<br/>'
                        + coor + '<br/>'
                        + "evidence.id:" + evidence.id + '<br/>'
                        + "u_poi.id:" + evidence.get('u_poi').id + '</p>'

                this.openInfoWindow(new BMap.InfoWindow(html));
            })

            map.addOverlay(marker)
        })
    }


    var addCoordinates = function (map, coors, timeList, cilac) {
        var markers = []
//        for (var i = 0; i < coors.length; i++) {
        coors.forEach(function (coor, index) {

            var point = new BMap.Point(coor.lng, coor.lat);
            var marker = new BMap.Marker(point);  // 创建标注

            var date = new Date(timeList[index] * 1000)
            var basestation = cilac[index]

            marker.addEventListener("click", function (e) {


                var html = '<p>info:</p>'
                        + date.toString() + '<br /> '
                        + 'lat:' + coor.lat + " lng:" + coor.lng + '<br/>'
                        + 'ci:' + basestation.ci + ' lac:' + basestation.lac + '<br/>'

                console.log(html)

                this.openInfoWindow(new BMap.InfoWindow(html));
            });

            markers.push(marker)
        })

        markers.forEach(function (marker) {
            map.addOverlay(marker)
        })

        console.log('mark finished')
    }


    var addUPOI = function (map, uPois) {

        if (uPois === null) {
            uPois = []
            alert('user has not u_pois')
        }

//        var iconUri = 'http://google.com'
//        var iconUri = 'https://www.baidu.com/img/bdlogo.png'
        var iconUri = '/images/u_poi_icon.png'
        var upoiIcon = new BMap.Icon(iconUri, new BMap.Size(40, 40));

        uPois.forEach(function (upoi) {
            var loc = upoi.get('location')
            var coor = [loc.latitude, loc.longitude]
            var poi_title = upoi.get('poi_title')

            var point = new BMap.Point(loc.longitude, loc.latitude);
            var marker = new BMap.Marker(point, {icon: upoiIcon});  // 创建标注

            marker.addEventListener("click", function (e) {

                if (upoi.id in infogbupoiid) {
                    var info = infogbupoiid[upoi.id]

                    var html = '<p>' + info + '<br />'
                            + '<b>' + poi_title + '</b> <br />'
                            + coor + '<br/>'
                            + upoi.id + '</p>'
                    this.openInfoWindow(new BMap.InfoWindow(html));
                } else {
                    var html = '<p>' + poi_title + '<br />'
                            + coor + '<br/>'
                            + upoi.id + '</p>'
                    this.openInfoWindow(new BMap.InfoWindow(html))
                }
            });

            map.addOverlay(marker)
        })

    }

    var addStartEnd = function (map, start, end) {
        var iconUri = '/images/u_poi_icon.png'
        var upoiIcon = new BMap.Icon(iconUri, new BMap.Size(40, 40));

        var addMarker = function (data) {

            var coor = [data.coor.lat, data.coor.lng]
            var type = data.type
            var dispName = data.displayname

            var point = new BMap.Point(data.coor.lng, data.coor.lat);
            var marker = new BMap.Marker(point, {icon: upoiIcon});  // 创建标注

            var time = null
            if ('time' in data) {
                time = new Date(data.time * 1000).toString()
            }

            marker.addEventListener("click", function (e) {

                var html = '<p>' + type + '<br />'
                        + '<b>' + dispName + '</b> <br />'
                        + coor + '<br/>'
                        + time + '<br/>'

                this.openInfoWindow(new BMap.InfoWindow(html));
            });

            map.addOverlay(marker)
        }

        addMarker(end)
        addMarker(start)

    }

    var tsStartEnd = function (date) {
//        var start = _.clone(date)
        var start = new Date(date.getTime());

        start.setHours(0)
        start.setMinutes(0)
        start.setSeconds(0)

        var tsStart = start.getTime()

//        var end = _.clone(date)
        var end = new Date(date.getTime())
        end.setHours(23)
        end.setMinutes(59)
        end.setSeconds(59)

        var tsEnd = end.getTime()

        return [tsStart, tsEnd]
    }

    // 百度地图API功能
    var map = new BMap.Map("allmap");    // 创建Map实例

    map.addControl(new BMap.MapTypeControl());   //添加地图类型控件
    //    map.setCurrentCity("北京");          // 设置地图显示的城市 此项是必须设置的
    map.enableScrollWheelZoom(true);     //开启鼠标滚轮缩放


    var processData = function (data) {
        //group by near location, key 4 digits of latitude and longitude
        for (ele in data) {
            var sign = str(ele.result.lat)


        }


    }

    var getData = function () {
        var promise = new AV.Promise()
///Users/jiusi/WebstormProjects/senz.app.timeline/public/geo_valid_8618618264607.data
        $.getJSON('/geo_valid.data', function (j) {

            var result = []

            j.forEach(function (ele) {

//                ele = JSON.parse(ele)

                var start_st = new Date(ele.start_time)
                var start_ts = start_st.getTime()

                var end_st = new Date(ele.end_time)
                var end_ts = end_st.getTime()

                ele.start_time = start_ts / 1000
                ele.end_ts = end_ts / 1000

                result.push(ele)
            })

            promise.resolve(result)
        }, function (e) {
            console.error(e)
        })

        return promise
    }

    var showAll = true
    var markByLocalFile = function (start, end) {

        getData().then(function (trace) {

            var inRange = []
//            for (dot in trace) {
//                if (dot['start_time'] < end && dot['start_time'] > start) {
//                    inRange.append(dot)
//                }
//            }

            trace.forEach(function (dot) {
                if (dot['start_time'] < end && dot['start_time'] > start) {
                    inRange.push(dot)
                }
            })

            var coors = []
            var times = []
            var cilac = []
            inRange.forEach(function (dot) {
                var geopoint = {
                    'lat': dot.result.lat,
                    'lng': dot.result.lng
                }
                coors.push(geopoint)
                times.push(dot.start_time)
                cilac.push({'ci': dot.ci, 'lac': dot.lac})
            })

            addCoordinates(map, coors, times, cilac)

            var centerLoc = coors[0]
            map.centerAndZoom(new BMap.Point(centerLoc.lng, centerLoc.lat), 11);  // 初始化地图,设置中心点坐标和地图级别
        })
    }

    var myDis = new BMapLib.DistanceTool(map);

    var start = parseInt(param['start'])
    var end = parseInt(param['end'])


    markByLocalFile(start, end)


</script>
