<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
    <meta name="viewport" content="initial-scale=1.0, user-scalable=no"/>
    <title>地图展示</title>
    <script type="text/javascript" src="/scripts/underscore-min.js"></script>
    <script src="/scripts/av-0.5.1.min.js"></script>
    <script type="text/javascript" src="http://api.map.baidu.com/api?v=2.0&ak=bHbEGIEzXaATRk08GLSZSGUA"></script>
    <script type="text/javascript" src="/scripts/convertor.js"></script>
    <script type="text/javascript" src="/scripts/DistanceTool_min.js"></script>
    <!-- jQuery文件。务必在bootstrap.min.js 之前引入 -->
    <script src="/scripts/jquery.min.js"></script>
    <style type="text/css">
        body, html, #allmap {
            width: 100%;
            height: 95%;
            /*overflow: hidden;*/
            margin: 0px;
        }
    </style>
</head>
<body>
<div style="padding: 10px;">
    <input type="checkbox" value="Activity" checked="checked"/> Activity
    <input type="checkbox" value="HomeOffice" checked="checked"/> HomeOffice
    <input type="checkbox" value="Event" checked="checked"/> Event
    <input type="checkbox" value="UPOI" checked="checked"/> UPOI
    <input type="checkbox" value="DisMode"/> 测距模式
</div>

<div id="allmap"></div>
</body>
</html>
<script type="text/javascript">

    param = <%- JSON.stringify(data) %>;
    console.log('param from backend:', param);

    // DAO
    var timelineId = 'pin72fr1iaxb7sus6newp250a4pl2n5i36032ubrck4bej81';
    var timelineKey = 'qs4o5iiywp86eznvok4tmhul360jczk7y67qj0ywbcq35iia';

    AV.initialize(timelineId, timelineKey);
    console.log('av initialized');

    var AVConvertAdaptor = function (avObjects) {
        var promise = new AV.Promise();
        var points = [];
        avObjects.forEach(function (avObject) {
            var loc = avObject.get('location');
            var point = {};
            point.lat = loc.lat;
            point.lng = loc.lng;
            points.push(point);
        });

        converter(points).then(function (result) {
            for (var i = 0; i < result.length; i++) {
                var point = new AV.GeoPoint({
                    latitude: result[i][0],
                    longitude: result[i][1]
                });
                avObjects[i].set('location', point);
            }
            promise.resolve(avObjects);
        });

        return promise;
    };


    var converter = function (points) {
        var promise = new AV.Promise();
        var new_points = [];
        var i = 0;
        var parseCallback = function (point) {
            new_points.push(point);
            i++;
            if (i < points.length) {
                BMap.Convertor.translate(points[i], 2, parseCallback);
            } else {
                var coors = [];
                new_points.forEach(function (point) {
                    coors.push([point.lat, point.lng]);
                });

                console.log('convert finished, length:', coors.length);
                promise.resolve(coors);
            }
        };
        BMap.Convertor.translate(points[i], 2, parseCallback);

        return promise;
    };


    var _findAll = function (query) {
        return query.count().then(
                function (count) {
                    var promises = [];
                    var pages = Math.ceil(count / 1000);
                    for (var i = 0; i <= pages; i++) {
                        var _query = _.clone(query);
                        _query.limit(1000);
                        _query.skip(i * 1000);
                        promises.push(_query.find());
                    }
                    return AV.Promise.all(promises);
                },
                function (error) {
                    return AV.Promise.error(error);
                }
        ).then(
                function (results) {
                    var rebuid_result = [];
                    results.forEach(function (result_list) {
                        result_list.forEach(function (list_item) {
                            rebuid_result.push(list_item);
                        });
                    });
                    return AV.Promise.as(rebuid_result);
                },
                function (error) {
                    return AV.Promise.error(error);
                }
        );
    };

    //    var getAvUserLocation = function (uid, tsStart, tsEnd) {
    //        console.log('uid:', uid, 'tsStart:', tsStart, 'tsEnd:', tsEnd);
    //
    //        var promise = new AV.Promise();
    //
    //        var UserLocation = AV.Object.extend('UserLocation');
    //        var User = AV.Object.extend('_User');
    //
    //        var query = new AV.Query(UserLocation);
    //
    //        var up = new User();
    //        up.id = uid;
    //
    //        query.equalTo('user', up);
    //        query.greaterThan('timestamp', tsStart);
    //        query.lessThan('timestamp', tsEnd);
    //
    //        var raw = null;
    //
    //        _findAll(query).then(function (result) {
    //            console.log('user location length:', result.length);
    //            promise.resolve(result);
    //
    //        })
    //        return promise;
    //    }

    //    var getAvHomeOfficeStatus = function (uid, tsStart, tsEnd) {
    //
    //        var promise = new AV.Promise();
    //
    //        var HomeOfficeStatus = AV.Object.extend('HomeOfficeStatus');
    //        var User = AV.Object.extend('_User');
    //
    //        var query = new AV.Query(HomeOfficeStatus);
    //        var up = new User();
    //        up.id = uid;
    //
    //        query.equalTo('user', up);
    //        query.greaterThanOrEqualTo('timestamp', tsStart);
    //        query.lessThanOrEqualTo('timestamp', tsEnd);
    //
    //        return _findAll(query);
    //    }

    //    var getLogTrace = function (installationId, tsStart, tsEnd) {
    //        var promise = new AV.Promise()
    //
    //    }

    var getUPois = function (uid) {
        var promise = new AV.Promise();
        var UPoi = AV.Object.extend('UPoi');
        var User = AV.Object.extend('_User');

        var query = new AV.Query(UPoi);

        var up = new User();
        up.id = uid;

        query.equalTo('user', up);

        _findAll(query).then(function (result) {
//            console.log('u_poi length:', result.length);
            promise.resolve(result);
        })

        return promise;
    }

    //    var getAvUPoiEvi = function (upois) {
    //        var promise = new AV.Promise()
    //        var marked_UserLocation = AV.Object.extend('marked_UserLocation')
    //
    //        var query = new AV.Query(marked_UserLocation)
    //        query.containedIn('u_poi', upois)
    //        query.doesNotExist("u_poi_visit_log")
    //
    //        _findAll(query).then(function (result) {
    ////            console.log('u_poi evidences length:', result.length);
    //            promise.resolve(result);
    //        })
    //
    //        return promise;
    //    }

    //    var getMoUPoiEvi = function (upois) {
    //
    //        var promise = new AV.Promise();
    //        var where = 'filter[where][and][0][where][uid]=' + uid;
    //        var path = 'http://119.254.111.40:3000/api/MarkedUserLocation?filter=' + where;
    //
    //        $.getJSON(path, function (data) {
    //            if (data) {
    //                promise.resolve(data);
    //            } else {
    //                promise.reject('load failed:', path);
    //            }
    //        })
    //        return promise;
    //    }


    var addEvidences = function (map, evidences) {

        if (evidences === null) {
            evidences = []
        }

        var iconUri = '/images/evidence_icon.png'
        var evidenceIcon = new BMap.Icon(iconUri, new BMap.Size(16, 16));

        evidences.forEach(function (evidence) {
            var loc = evidence.location
            // evidence is marked user location in mongo
            var coor = [loc.lat, loc.lng];
            var point = new BMap.Point(loc.lat, loc.lng);

            var marker = new BMap.Marker(point, {icon: evidenceIcon});  // 创建标注
            var date = new Date(evidence.timestamp)

            marker.addEventListener('click', function (e) {
                var html = '<p>' + 'Evidence info:' + '<br/>'
                        + date.toString() + '<br /> '
                        + evidence.timestamp + '<br/>'
                        + coor + '<br/>'
                        + "evidence.id:" + evidence.id + '<br/>'
                        + "u_poi.id:" + evidence.u_poi_id + '</p>'

                this.openInfoWindow(new BMap.InfoWindow(html));
            })

            map.addOverlay(marker);
        })
    }

    //    var addCoordinates = function (map, coors, timeList, phoneList) {
    //        var markers = []
    //        for (var i = 0; i < coors.length; i++) {
    //
    //            var coor = coors[i]
    //            var date = new Date(timeList[i])
    //            var phone = phoneList[i]
    //
    //            var point = new BMap.Point(coor.lng, coor.lat);
    //            var marker = new BMap.Marker(point);  // 创建标注
    //
    //            marker.addEventListener("click", function (e) {
    //
    //                var html = '<p>' + info + '<br/>'
    //                        + '<b>phone:</b>' + phone + '<br/>'
    //                        + date.toString() + '<br /> '
    //                        + coor + '<br/>'
    //
    //                this.openInfoWindow(new BMap.InfoWindow(html));
    //            });
    //
    //            markers.push(marker);
    //        }
    //
    //        markers.forEach(function (marker) {
    //            map.addOverlay(marker);
    //        });
    //    }

    var addIconLegend = function (map, x, y, icon, text) {

        function ZoomControl() {
            this.defaultAnchor = BMAP_ANCHOR_TOP_LEFT;
            this.defaultOffset = new BMap.Size(x, y);
        }

        ZoomControl.prototype = new BMap.Control();
        ZoomControl.prototype.initialize = function (map) {
            var div = document.createElement("div");
            var img = document.createElement("img")
            var txt = document.createElement("label")
            img.setAttribute('src', icon);
            txt.textContent = text;
            txt.setAttribute('style', "font-size: 32px")
            div.appendChild(img);
            div.appendChild(txt);

            map.getContainer().appendChild(div);
            return div;
        }

        var myZoomCtrl = new ZoomControl();

        map.addControl(myZoomCtrl);
    };

    // END OF DAO
    var addUserLocation = function (map, userLocations, ulIds, showAll) {
        if (userLocations === null) {
            userLocations = [];
            alert('user has no location data within time range');
        }

        var iconblue = new BMap.Icon('/images/flag_blue.png', new BMap.Size(32, 44));
        var iconyellow = new BMap.Icon('/images/flag_yellow.png', new BMap.Size(32, 44));
        var icongreen = new BMap.Icon('/images/flag_green.png', new BMap.Size(32, 44));
        var iconsubway = new BMap.Icon('/images/subway.png', new BMap.Size(32, 44));

        addIconLegend(map, 10, 10, '/images/flag_blue.png', 'Activity');
        addIconLegend(map, 10, 60, '/images/flag_yellow.png', 'HomeOffice');
        addIconLegend(map, 10, 110, '/images/flag_green.png', 'Event');
        addIconLegend(map, 10, 160, '/images/subway.png', 'Subway');

        event_match.length = 0;
        activity_match.length = 0;
        home_office_match.length = 0;
        event_location_id.length = 0;
        activity_location_id.length = 0;
        home_office_location_id.length = 0;
        var index = -1;
        var type = '';

        userLocations.forEach(function (userLocation) {
            if (ulIds.indexOf(userLocation._id) > -1 || showAll) {
                var loc = userLocation.location;
                var coor = [loc.lat, loc.lng];
                var point = new BMap.Point(loc.lng, loc.lat);

                userEvent.forEach(function (event, index) {
                    var evidence_list = event.evidence_list || [];
                    evidence_list.forEach(function (evidence) {
                        if (userLocation._id == evidence.location_id) {
                            event_match.push(index);
                            event_location_id.push(userLocation._id);
                        }
                    })
                });

                userActivity.forEach(function (activity, index) {
                    var evidence_list = activity.evidence || [];
                    evidence_list.forEach(function (evidence) {
                        if (userLocation._id == evidence.location_id) {
                            activity_match.push(index);
                            activity_location_id.push(userLocation._id);
                        }
                    })
                });

                homeOfficeStatus.forEach(function (home_office, index) {
                    if (userLocation._id == home_office.user_location_id) {
                        home_office_match.push(index);
                        home_office_location_id.push(userLocation._id);
                    }
                });

                var marker = new BMap.Marker(point);
                if ((index = activity_location_id.indexOf(userLocation._id)) >= 0) {
                    marker = new BMap.Marker(point, {icon: iconblue});
                    type = 'activity';
                } else if ((index = home_office_location_id.indexOf(userLocation._id)) >= 0 &&
                        homeOfficeStatus[home_office_match[index]].status != 'unknown_status') {
                    marker = new BMap.Marker(point, {icon: iconyellow});
                    type = 'homeOffice';
                } else if ((index = event_location_id.indexOf(userLocation._id)) >= 0
                        && Object.keys(userEvent[event_match[index]].event)[0] != 'unknown') {
                    if (userEvent[event_match[index]].isOnSubway) {
                        marker = new BMap.Marker(point, {icon: iconsubway});
                    } else {
                        marker = new BMap.Marker(point, {icon: icongreen});
                    }
                    type = 'event';
                }

                var date = new Date(userLocation.timestamp);
                marker.addEventListener("click", function () {
                    html = '<p>' + 'user location info:' + '<br/>'
                            + date.toString() + '<br /> '
                            + userLocation.timestamp + '<br/>'
                            + coor + '<br/>'
                            + userLocation._id + '</p>';

                    if ((index = event_location_id.indexOf(userLocation._id)) >= 0
                            && Object.keys(userEvent[event_match[index]].event)[0] != 'unknown') {
                        var event = userEvent[event_match[index]].isOnSubway ? "contextTakingSubway"
                                : Object.keys(userEvent[event_match[index]].event)[0]
                        html +=
                                '<p>' + 'UserEvent: ' + '<br/>'
                                + 'objectId: ' + userEvent[event_match[index]]._id + '<br>'
                                + 'Event: ' + event
                                + '</p>';
                    }
                    if ((index = activity_location_id.indexOf(userLocation._id)) >= 0) {
                        html +=
                                '<p>' + 'UserActivity: ' + '<br/>'
                                + 'objectId: ' + userActivity[activity_match[index]].objectId + '<br>'
                                + 'category: ' + userActivity[activity_match[index]].matched_activities[0].category + '<br>'
                                + 'name: ' + userActivity[activity_match[index]].matched_activities[0].name + '<br>'
                                + 'event_id: ' + userActivity[activity_match[index]].matched_activities[0].event_id + '<br>'
                                + '</p>';
                    }

                    if ((index = home_office_location_id.indexOf(userLocation._id)) >= 0
                            && homeOfficeStatus[home_office_match[index]].status != 'unknown_status') {
                        html +=
                                '<p>' + 'HomeOfficeStatus: ' + '<br>'
                                + 'objectId: ' + homeOfficeStatus[home_office_match[index]]._id + '<br>'
                                + 'status: ' + homeOfficeStatus[home_office_match[index]].status
                                + '</p>';
                    }
                    this.openInfoWindow(new BMap.InfoWindow(html));
                });

                switch (type) {
                    case 'activity':
                        activityMarkers.push(marker);
                        break;
                    case 'homeOffice':
                        homeOfficeMarkers.push(marker);
                        break;
                    case 'event':
                        eventMarkers.push(marker);
                        break;
                }
            }
        });

        console.log('activity length:', activityMarkers.length);
        console.log('homeOffice length:', homeOfficeMarkers.length);
        console.log('event length:', eventMarkers.length);
        activityMarkers.forEach(function (marker) {
            map.addOverlay(marker);
        });
        homeOfficeMarkers.forEach(function (marker) {
            map.addOverlay(marker);
        });
        eventMarkers.forEach(function (marker) {
            map.addOverlay(marker);
        });

    }

    var addUPOI = function (map, uPois) {

        if (uPois === null) {
            uPois = [];
            alert('user has not u_pois');
        }

        var iconUri = '/images/u_poi_icon.png';
        var upoiIcon = new BMap.Icon(iconUri, new BMap.Size(40, 40));

        uPois.forEach(function (upoi) {
            var loc = upoi.get('location')
            var coor = [loc.latitude, loc.longitude]
            var poi_title = upoi.get('poi_title')

            var point = new BMap.Point(loc.longitude, loc.latitude);
            var marker = new BMap.Marker(point, {icon: upoiIcon});  // 创建标注

            marker.addEventListener("click", function () {
                var html = '<p>' + poi_title + '<br />'
                        + coor + '<br/>'
                        + upoi.id + '</p>'
                this.openInfoWindow(new BMap.InfoWindow(html));
            });

            upoiMarkers.push(marker);
        });

        console.log('u_poi length:', upoiMarkers.length);
        upoiMarkers.forEach(function (marker) {
            map.addOverlay(marker);
        });

    }

    var tsStartEnd = function (date) {
        var start = new Date(date.getTime());

        start.setHours(0);
        start.setMinutes(0);
        start.setSeconds(0);

        var tsStart = start.getTime();

        var end = new Date(date.getTime());
        end.setHours(23);
        end.setMinutes(59);
        end.setSeconds(59);

        var tsEnd = end.getTime();

        return [tsStart, tsEnd];
    }

    // 百度地图API功能
    var map = new BMap.Map("allmap");    // 创建Map实例

    map.addControl(new BMap.MapTypeControl());   //添加地图类型控件
    //    map.setCurrentCity("北京");          // 设置地图显示的城市 此项是必须设置的
    map.enableScrollWheelZoom(true);     //开启鼠标滚轮缩放

    var markByAVOS = function (uid, tsStart, tsEnd, userLocation, plotClusterEvidence, needToConvert) {
        console.log('start:', new Date(tsStart),
                'end:', new Date(tsEnd),
                'tsStart:', tsStart,
                'tsEnd:', tsEnd,
                'convert:', needToConvert,
                'show evidence', plotClusterEvidence);

        var centerLoc = null;

        (function () {
            if (needToConvert) {
                return AVConvertAdaptor(userLocation);
            } else {
                return AV.Promise.as(userLocation);
            }
        }()).then(function (result) {
                    if (result.length == 0) {
                        alert('no data');
                    }
                    centerLoc = result[0].location;
                    addUserLocation(map, result, [], showAll);
                    return getUPois(uid);
                }).then(function (result) {
                    if (needToConvert) {
                        return AVConvertAdaptor(result);
                    } else {
                        return AV.Promise.as(result);
                    }
                }).then(function (result) {
                    addUPOI(map, result);
                    if (plotClusterEvidence) {
                        return getUPoiEvidences(result);
                    } else {
                        return AV.Promise.as([]);
                    }
                }).then(function (result) {
                    if (needToConvert) {
                        return AVConvertAdaptor(result);
                    } else {
                        return AV.Promise.as(result);
                    }
                }).then(function (evidences) {
//                    console.log('evidences:', evidences);
                    addEvidences(map, evidences);
                    // centerLoc is one of the user locations
                    map.centerAndZoom(new BMap.Point(centerLoc.lng, centerLoc.lat), 16);  // 初始化地图,设置中心点坐标和地图级别
                });
    }

    var myDis = new BMapLib.DistanceTool(map);
    var userLocation = param['userLocation'];
    var userEvent = param['userEvent'];
    var userActivity = param['userActivity'];
    var homeOfficeStatus = param['homeOfficeStatus'];
    var tsStart = param['tsStart'];
    var tsEnd = param['tsEnd'];
    var uid = param['uid'];
    var showEvidence = param['showEvidence'];
    var needConvert = param['convert'];

    var showAll = true;

    var event_match = [];
    var event_location_id = [];
    var activity_match = [];
    var activity_location_id = [];
    var home_office_match = [];
    var home_office_location_id = [];

    var activityMarkers = [];
    var homeOfficeMarkers = [];
    var eventMarkers = [];
    var upoiMarkers = [];

    console.log('uid:', uid)

    markByAVOS(uid, tsStart, tsEnd, userLocation, showEvidence, needConvert);

    $(document).ready(function () {
        $('input[type=checkbox]').change(function () {
            var which = $(this).val();
            var isChecked = $(this).is(':checked');
            switch (which) {
                case 'Activtiy':
                    if (isChecked) {
                        showActivity();
                    } else {
                        hideActivity();
                    }
                    break;
                case 'HomeOffice':
                    if (isChecked) {
                        showHomeOffice();
                    } else {
                        hideHomeOffice();
                    }
                    break;
                case 'Event':
                    if (isChecked) {
                        showEvent();
                    } else {
                        hideEvent();
                    }
                    break;
                case 'UPOI':
                    if (isChecked) {
                        showUPOI();
                    } else {
                        hideUPOI();
                    }
                    break;
                case 'DisMode':
                    if (isChecked) {
                        myDis.open();
                    } else {
                        myDis.close();
                    }
                    break;
            }
        });
    });

    function showActivity() {
        activityMarkers.forEach(function (marker) {
            map.addOverlay(marker);
        });
    }

    function hideActivity() {
        activityMarkers.forEach(function (marker) {
            map.removeOverlay(marker);
        });
    }
    function showHomeOffice() {
        homeOfficeMarkers.forEach(function (marker) {
            map.addOverlay(marker);
        });
    }

    function hideHomeOffice() {
        homeOfficeMarkers.forEach(function (marker) {
            map.removeOverlay(marker);
        });
    }
    function showEvent() {
        eventMarkers.forEach(function (marker) {
            map.addOverlay(marker);
        });
    }

    function hideEvent() {
        eventMarkers.forEach(function (marker) {
            map.removeOverlay(marker);
        });
    }

    function showUPOI() {
        upoiMarkers.forEach(function (marker) {
            map.addOverlay(marker);
        });
    }

    function hideUPOI() {
        upoiMarkers.forEach(function (marker) {
            map.removeOverlay(marker);
        });
    }
</script>
